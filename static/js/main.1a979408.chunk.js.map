{"version":3,"sources":["components/Buttons.js","components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","className","onClick","count","buttonClass","clear","Counter","minutes","seconds","miliseconds","App","state","IndexOfInterval","handleClear","clearInterval","setState","handleCount","setInterval","handleStartCount","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAWeA,EATC,SAACC,GACb,OACI,qCACA,wBAAQC,UAAU,yBAAyBC,QAASF,EAAMG,MAA1D,SAAiE,mBAAGF,UAAWD,EAAMI,gBACrF,wBAAQH,UAAU,yBAAyBC,QAASF,EAAMK,MAA1D,SAAiE,mBAAGJ,UAAU,sBCOvEK,EAXC,SAACN,GAAW,IACjBO,EAAiCP,EAAjCO,QAASC,EAAwBR,EAAxBQ,QAASC,EAAeT,EAAfS,YACzB,OACI,qCACA,sBAAMR,UAAU,UAAhB,SAA2BM,EAAU,GAAV,WAAmBA,GAAYA,IAD1D,IAEA,sBAAMN,UAAU,UAAhB,SAA2BO,EAAU,GAAV,WAAmBA,GAAYA,IAF1D,IAGA,sBAAMP,UAAU,cAAhB,SAA+BQ,EAAc,GAAd,WAAuBA,GAAgBA,QCuF/DC,E,4MAxFbC,MAAQ,CACNF,YAAa,EACbD,QAAS,EACTD,QAAS,EACTH,YAAa,cACbQ,gBAAiB,M,EAGnBC,YAAc,WACZ,IAAIT,EAAc,EAAKO,MAAMP,YAET,iBAAhBA,IAAgCA,EAAc,eAElDU,cAAc,EAAKH,MAAMC,iBAEzB,EAAKG,SAAS,CACZN,YAAa,EACbD,QAAS,EACTD,QAAS,EACTH,iB,EAIJY,YAAc,WACZ,IAAIZ,EAAc,EAAKO,MAAMP,YACzBQ,EAAkB,EAAKD,MAAMC,gBAEb,gBAAhBR,GACFA,EAAc,eACdQ,EAAkBK,YAAY,EAAKC,iBAAkB,MAErDd,EAAc,cACdU,cAAcF,IAGhB,EAAKG,SAAS,CACZX,cACAQ,qB,EAIJM,iBAAmB,WACjB,IAAIT,EAAc,EAAKE,MAAMF,YACzBD,EAAU,EAAKG,MAAMH,QACrBD,EAAU,EAAKI,MAAMJ,QAIL,OAFpBE,GAAe,KAGbA,EAAc,EACdD,GAAW,GAGG,KAAZA,IACFD,GAAW,EACXC,EAAU,GAGZ,EAAKO,SAAS,CACZN,cACAD,UACAD,a,4CAKJ,WAAU,IAAD,EAEgDY,KAAKR,MAApDF,EAFD,EAECA,YAAaD,EAFd,EAEcA,QAASD,EAFvB,EAEuBA,QAASH,EAFhC,EAEgCA,YAEzC,OACE,qBAAKH,UAAU,MAAf,SACC,sBAAKA,UAAU,SAAf,UACC,oBAAIA,UAAU,aAAd,oBACA,qBAAKA,UAAU,eAAf,SACA,sBAAMA,UAAU,eAAhB,SACA,cAAC,EAAD,CAASM,QAASA,EAASC,QAASA,EAASC,YAAaA,QAG1D,qBAAKR,UAAU,kBAAf,SACE,cAAC,EAAD,CAASI,MAAOc,KAAKN,YAAaV,MAAOgB,KAAKH,YAAaZ,YAAaA,e,GAlF9DgB,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a979408.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Buttons = (props) => {\r\n    return ( \r\n        <>\r\n        <button className=\"stoper__buttons-button\" onClick={props.count}><i className={props.buttonClass}></i></button>\r\n        <button className=\"stoper__buttons-button\" onClick={props.clear}><i className=\"fas fa-stop\"></i></button>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Counter = (props) => {\r\n    const {minutes, seconds, miliseconds} = props\r\n    return ( \r\n        <>\r\n        <span className=\"minutes\">{minutes < 10 ? `0${minutes}` : minutes}</span>:\r\n        <span className=\"seconds\">{seconds < 10 ? `0${seconds}` : seconds}</span>:\r\n        <span className=\"miliseconds\">{miliseconds < 10 ? `0${miliseconds}` : miliseconds}</span>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Counter;","import React from 'react';\nimport './App.css';\nimport Buttons from './components/Buttons';\nimport Counter from './components/Counter';\n\nclass App extends React.Component {\n\n  state = {\n    miliseconds: 0,\n    seconds: 0,\n    minutes: 0,\n    buttonClass: \"fas fa-play\",\n    IndexOfInterval: null\n  };\n\n  handleClear = () => {\n    let buttonClass = this.state.buttonClass;\n\n    if (buttonClass === 'fas fa-pause') buttonClass = \"fas fa-play\"\n\n    clearInterval(this.state.IndexOfInterval)\n\n    this.setState({\n      miliseconds: 0,\n      seconds: 0,\n      minutes: 0,\n      buttonClass\n    })\n  }\n\n  handleCount = () => {\n    let buttonClass = this.state.buttonClass;\n    let IndexOfInterval = this.state.IndexOfInterval;\n\n    if (buttonClass === \"fas fa-play\") {\n      buttonClass = 'fas fa-pause'\n      IndexOfInterval = setInterval(this.handleStartCount, 10)\n    } else {\n      buttonClass = \"fas fa-play\"\n      clearInterval(IndexOfInterval)\n    }\n\n    this.setState({\n      buttonClass,\n      IndexOfInterval\n    })\n  }\n\n  handleStartCount = () => {\n    let miliseconds = this.state.miliseconds;\n    let seconds = this.state.seconds;\n    let minutes = this.state.minutes;\n\n    miliseconds += 1;\n\n    if (miliseconds === 100) {\n      miliseconds = 0;\n      seconds += 1;\n    }\n\n    if (seconds === 60) {\n      minutes += 1\n      seconds = 0\n    }\n\n    this.setState({\n      miliseconds,\n      seconds,\n      minutes\n    })\n  }\n\n\n  render() {\n    \n    const { miliseconds, seconds, minutes, buttonClass } = this.state\n\n  return (\n    <div className='App'>\n     <div className=\"stoper\">\n      <h1 className=\"stoper__h1\">stoper</h1>\n      <div className=\"stoper__time\">\n      <span className=\"stoper__span\">\n      <Counter minutes={minutes} seconds={seconds} miliseconds={miliseconds}/>\n      </span>\n      </div>\n      <div className=\"stoper__buttons\">\n        <Buttons clear={this.handleClear} count={this.handleCount} buttonClass={buttonClass}/>\n      </div>\n     </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}